/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const getCanvasTag = __webpack_require__(/*! ./util/getCanvasTag */ \"./src/util/getCanvasTag.js\");\nconst setupRenderer = __webpack_require__(/*! ./setupRenderer */ \"./src/setupRenderer.js\");\n\n(function() {\n  // Prepare initial canvas tag\n  const canvas = getCanvasTag();\n\n  // Dynamically append tag to page body\n  document.body.appendChild(canvas);\n\n  // Setup core rendering loop\n  setupRenderer(canvas);\n})();\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/setupRenderer.js":
/*!******************************!*\
  !*** ./src/setupRenderer.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const getRandomBallAtPosition = __webpack_require__(/*! ./util/getRandomBallAtPosition */ \"./src/util/getRandomBallAtPosition.js\");\nconst { registerEventHandlers, handleResizeCanvasEvent } = __webpack_require__(/*! ./util/canvasEvents */ \"./src/util/canvasEvents.js\");\n\n/**\n * @private Clear canvas back to a clean state, ready for new drawings. Called once per frame.\n * @param {Object} canvas DOM node\n * @param {Object} canvas 2d context\n */\nfunction repaintCanvas(canvas, ctx) {\n  // The last parameter of the fillStyle rgba value (opacity) creates a \"trailing blur\" style effect\n  ctx.fillStyle = `rgba(255, 255, 255, 0.8)`;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\n// Store for active balls on canvas\nconst animatedBalls = [];\n\n/**\n * @private Core rendering loop - iterate through each rendered ball and update position\n *\n * @param {Object} canvas DOM node\n * @param {Object} canvas 2d context\n */\nfunction renderCanvasFrame(canvas, ctx) {\n  // clear the background\n  repaintCanvas(canvas, ctx);\n\n  for (let i = 0;i < animatedBalls.length;i++) {\n    const ball = animatedBalls[i];\n\n    // if off screen we don't need to keep rendering it\n    if (ball.isOutsideHorizontalScreen()) {\n      animatedBalls.splice(i, 1);\n      i--;\n      continue;\n    }\n\n    // otherwise allow ball to move position\n    ball.renderUpdate();\n  }\n\n  // call next animation frame\n  requestAnimationFrame(() => renderCanvasFrame(canvas, ctx));\n}\n\n/**\n * @private Callback handler for click events - renders new random ball at position\n *\n * @param {Object} canvas DOM reference\n * @param {number} positionX\n * @param {number} positionY\n */\nfunction handleClickEvent(canvas, positionX, positionY) {\n  animatedBalls.push(getRandomBallAtPosition(canvas, positionX, positionY));\n}\n\nmodule.exports = function setupRenderer(canvas) {\n  const ctx = canvas.getContext('2d');\n\n  renderCanvasFrame(canvas, ctx);\n\n  // Set initial canvas size\n  handleResizeCanvasEvent(canvas);\n\n  registerEventHandlers(\n    canvas,\n    (positionX, positionY) => handleClickEvent(canvas, positionX, positionY)\n  );\n};\n\n//# sourceURL=webpack:///./src/setupRenderer.js?");

/***/ }),

/***/ "./src/util/Ball.js":
/*!**************************!*\
  !*** ./src/util/Ball.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const isTouchingBottom = __webpack_require__(/*! ./isTouchingBottom */ \"./src/util/isTouchingBottom.js\");\nconst isOutsideHorizontalFrame = __webpack_require__(/*! ./isOutsideHorizontalFrame */ \"./src/util/isOutsideHorizontalFrame.js\");\n\n/**\n * Draw a circle in a 2D canvas rendering context\n * @param {Object} ctx canvas 2d context\n * @param {number} positionX - horizontal position\n * @param {number} positionY - vertical position\n * @param {number} radius\n * @param {string} fillStyle - style/colour\n */\nconst drawCircleInContext = (ctx, positionX, positionY, radius, fillStyle) => {\n  ctx.beginPath();\n  ctx.fillStyle = fillStyle;\n  ctx.arc(positionX, positionY, radius, 0, Math.PI * 2);\n  ctx.fill();\n  ctx.closePath();\n}\n\nconst MIN_MOMENTUM = 0.01;\nconst DECAY_MOMENTUM_X = 0.995;\nconst DECAY_MOMENTUM_Y = 0.5;\n\nclass Ball {\n  /**\n   * Initialise a new Ball instance\n   * @param {number} xPosition - initial horizontal position\n   * @param {number} yPosition - initial vertical position\n   * @param {number} radius - size of ball\n   * @param {number} horizontalMomentum - initial horizontal momentum\n   * @param {number} verticalMomentum - initial vertical momentum (negative == upward)\n   * @param {string} fillStyle - ball colour/style\n   */\n  constructor(canvas, xPosition, yPosition, radius, horizontalMomentum, verticalMomentum, fillStyle) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.x = xPosition;\n    this.y = yPosition;\n    this.radius = radius;\n\n    this.momentumY = verticalMomentum;\n    this.momentumX = horizontalMomentum;\n\n    // colour for the ball\n    this.fillStyle = fillStyle;\n\n    // adjust gravity relative to radius\n    this.gravity = radius * 0.05;\n  }\n\n  /**\n   * @public Check whether this ball is horizontally outside the frame (left & right) boundaries\n   * @returns {boolean} whether the ball is no longer horizontally visible\n   */\n  isOutsideHorizontalScreen() {\n    return isOutsideHorizontalFrame(this.x, this.radius, this.canvas.width);\n  }\n\n  /**\n   * @public Render a circle in the current canvas context\n   */\n  draw() {\n    drawCircleInContext(this.ctx, this.x, this.y, this.radius, this.fillStyle);\n    return this;\n  }\n\n  /**\n   * Update rendered object's x/y position\n   */\n  renderUpdate() {\n    const didMoveVertically = this.checkVerticalMove();\n    const didMoveHorizontally = this.checkHorizontalMove();\n\n    this.draw();\n  }\n\n  /**\n   * @private Handle horizontal movement and momentum\n   * @returns {boolean} true if horizontally moved\n   */\n  checkHorizontalMove() {\n    const hasHorizontalMomentum = Math.abs(this.momentumX) >= MIN_MOMENTUM;\n    if (!hasHorizontalMomentum || this.isOutsideHorizontalScreen()) {\n      return false;\n    }\n\n    this.x += this.momentumX;\n    this.momentumX = this.momentumX * DECAY_MOMENTUM_X;\n\n    // if vertical momentum has been lost, introduce more horizontal friction\n    if (this.momentumY == 0) {\n      this.momentumX = this.momentumX * (DECAY_MOMENTUM_X - 0.005);\n    }\n\n    return true;\n  }\n\n  /**\n   * @private Handle vertical movement and momentum. If touching bottom boundary, handle bounce.\n   * @returns {boolean} true if vertically moved\n   */\n  checkVerticalMove() {\n    const momentumY = this.momentumY;\n\n    const radius = this.radius;\n    const canvasHeight = this.canvas.height;\n\n    // If ball isn't touching bottom boundary yet, move it further down\n    if (!isTouchingBottom(this.y, radius, canvasHeight)) {\n      this.momentumY += this.gravity;\n      this.y += momentumY;\n\n      // if we've now crossed the bottom, make sure we don't exceed it\n      if (isTouchingBottom(this.y, radius, canvasHeight)) {\n        this.y = canvasHeight - radius;\n      }\n      return true;\n    }\n\n    // Ball is touching bottom boundary - check if emough momentum remains for a bounce\n    const hasVerticalMomentum = Math.abs(momentumY) >= radius / 3;\n    if (!hasVerticalMomentum) {\n      this.momentumY = 0;\n      this.y = canvasHeight - radius;\n      return false;\n    }\n\n    // Trigger bounce : Flip momentum direction while reducing total momentum\n    this.momentumY = -(momentumY * DECAY_MOMENTUM_Y);\n    this.y += this.momentumY;\n    return true;\n  }\n}\n\nmodule.exports = Ball;\n\n//# sourceURL=webpack:///./src/util/Ball.js?");

/***/ }),

/***/ "./src/util/canvasEvents.js":
/*!**********************************!*\
  !*** ./src/util/canvasEvents.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * @private Resize canvas dimensions based on window resize events. Called on resize event.\n * @param {object} canvas DOM reference\n */\nfunction handleResizeCanvasEvent(canvas) {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\n/**\n * @public Register event handlers for click and resize\n * @param {object} canvas DOM reference\n * @param {function} callback handler when a click event is seen\n */\nfunction registerEventHandlers(canvas, handleClickEventCallback) {\n  addEventListener('resize', () => handleResizeCanvasEvent(canvas));\n  addEventListener(\"click\", event => {\n    handleClickEventCallback && handleClickEventCallback(event.offsetX, event.clientY);\n  });\n}\n\nmodule.exports = { registerEventHandlers, handleResizeCanvasEvent };\n\n//# sourceURL=webpack:///./src/util/canvasEvents.js?");

/***/ }),

/***/ "./src/util/getCanvasTag.js":
/*!**********************************!*\
  !*** ./src/util/getCanvasTag.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Dynamically render a canvas tag with predefined style properties\n * @returns {Object} canvas tag\n */\nfunction createCanvasTag() {\n  var canvas = document.createElement('canvas');\n\n  // this allows the tag to cover the full screen without interfering with an existing website\n  canvas.style.position = \"absolute\";\n  canvas.style.top = \"0\";\n  canvas.style.left = \"0\";\n  canvas.style[\"z-index\"] = \"-1\";\n\n  return canvas;\n}\n\nmodule.exports = createCanvasTag;\n\n//# sourceURL=webpack:///./src/util/getCanvasTag.js?");

/***/ }),

/***/ "./src/util/getRandomBallAtPosition.js":
/*!*********************************************!*\
  !*** ./src/util/getRandomBallAtPosition.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Ball = __webpack_require__(/*! ./Ball */ \"./src/util/Ball.js\");\nconst getRandomNumberInRange = __webpack_require__(/*! ./getRandomNumberInRange */ \"./src/util/getRandomNumberInRange.js\");\n\n/**\n * Generate a randomly sized canvas ball at position with random momentum\n * @param {Object} canvas DOM reference\n * @param {number} positionX\n * @param {number} positionY\n * @returns {Ball} canvas Ball\n */\nconst getRandomBallAtPosition = (canvas, positionX, positionY) => {\n  const randomRadius = getRandomNumberInRange(3, 20);\n\n  const horizontalMomentum = getRandomNumberInRange(-10, 10);\n  const verticalMomentum = getRandomNumberInRange(-20, 0);\n\n  const ballFillStyle = 'black';\n\n  return new Ball(\n    canvas,\n    positionX,\n    positionY,\n    randomRadius,\n    horizontalMomentum,\n    verticalMomentum,\n    ballFillStyle\n  ).draw();\n}\n\nmodule.exports = getRandomBallAtPosition;\n\n//# sourceURL=webpack:///./src/util/getRandomBallAtPosition.js?");

/***/ }),

/***/ "./src/util/getRandomNumberInRange.js":
/*!********************************************!*\
  !*** ./src/util/getRandomNumberInRange.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Generate a random whole number within a range\n * @param {number} min\n * @param {number} max\n * @returns {number} random whole number in range\n */\nfunction getRandomNumberInRange(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nmodule.exports = getRandomNumberInRange;\n\n//# sourceURL=webpack:///./src/util/getRandomNumberInRange.js?");

/***/ }),

/***/ "./src/util/isOutsideHorizontalFrame.js":
/*!**********************************************!*\
  !*** ./src/util/isOutsideHorizontalFrame.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Check if a circle with radius is outside a horizontal frame\n * @param {number} positionX - horizontal position\n * @param {number} radius\n * @param {number} frameWidth\n */\nconst isOutsideHorizontalFrame = (positionX, radius, frameWidth) => {\n  const isPastRightEdge = (positionX - radius) > frameWidth;\n  const isPastLeftEdge = (positionX + radius) < 0;\n  return isPastLeftEdge || isPastRightEdge;\n}\n\nmodule.exports = isOutsideHorizontalFrame;\n\n//# sourceURL=webpack:///./src/util/isOutsideHorizontalFrame.js?");

/***/ }),

/***/ "./src/util/isTouchingBottom.js":
/*!**************************************!*\
  !*** ./src/util/isTouchingBottom.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Check if a circle with radius is touching the bottom boundary of a given frame\n * @param {number} positionY - vertical position\n * @param {number} radius\n * @param {number} frameHeight\n */\nconst isTouchingBottom = (positionY, radius, frameHeight) => {\n  return (positionY + radius) >= frameHeight;\n}\n\nmodule.exports = isTouchingBottom;\n\n//# sourceURL=webpack:///./src/util/isTouchingBottom.js?");

/***/ })

/******/ });